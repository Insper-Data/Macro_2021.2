if (nomes1[k] == colnames(panel_data)[i]) {
gov[k] <- (pesos1[k]/100)*panel_data[1, i]
# print(pesos1[k])
# print(panel_data[1, i])
# print("/n")
}
}
}
sum(gov)
for (k in 1:m) {
for (i in 1:n) {
if (nomes1[k] == colnames(panel_data)[i]) {
gov[k] <- (pesos1[k])*panel_data[1, i]
# print(pesos1[k])
# print(panel_data[1, i])
# print("/n")
}
}
}
sum(gov)
length(panel_data)
length(panel_data)[1]
linhas <- nrow(panel_data)
nrow(panel_data)
for (j in 1:linhas) {
for (k in 1:m) {
for (i in 1:n) {
if (nomes1[k] == colnames(panel_data)[i]) {
gov_[k] <- (pesos1[k])*panel_data[j, i]
gov[j] <- sum(gov_[k])
}
}
}
}
m <- length(nomes1)
linhas <- nrow(panel_data)
gov_ <- vector()
gov <- vector()
for (j in 1:linhas) {
for (k in 1:m) {
for (i in 1:n) {
if (nomes1[k] == colnames(panel_data)[i]) {
gov_[k] <- (pesos1[k])*panel_data[j, i]
gov[j] <- sum(gov_[k])
}
}
}
}
gov
m <- length(nomes1)
linhas <- nrow(panel_data)
gov_ <- vector()
gov <- vector()
for (j in 1:linhas) {
for (k in 1:m) {
for (i in 1:n) {
if (nomes1[k] == colnames(panel_data)[i]) {
gov_[k] <- (pesos1[k])*panel_data[j, i]
}
}
}
}
gov_
sum(gov_)
for (k in 1:m) {
for (i in 1:n) {
if (nomes1[k] == colnames(panel_data)[i]) {
gov_[k] <- (pesos1[k]) * panel_data[1, i]
}
}
}
gov_
for (k in 1:m) {
for (i in 1:n) {
if (nomes1[k] == colnames(panel_data)[i]) {
gov_[k] <- (pesos1[k]) * panel_data[1, i]
teste <- gov_[k] + gov_[k-1]
}
}
}
teste
sum(gov_)
teste = 0
#for (j in 1:linhas) {
for (k in 1:m) {
for (i in 1:n) {
if (nomes1[k] == colnames(panel_data)[i]) {
gov_[k] <- (pesos1[k]) * panel_data[1, i]
teste <- gov_[k] + gov_[k-1]
}
}
}
#}
teste
sum(gov_)
m <- length(nomes1)
linhas <- nrow(panel_data)
gov_ <- vector()
gov <- vector()
for (j in 1:linhas) {
for (k in 1:m) {
for (i in 1:n) {
if (nomes1[k] == colnames(panel_data)[i]) {
gov_[k] <- (pesos1[k]) * panel_data[1, i]
}
}
}
gov[j] <- sum(gov_[k])
}
sum(gov_)
gov
m <- length(nomes1)
linhas <- nrow(panel_data)
gov_ <- vector()
gov <- vector()
for (j in 1:linhas) {
for (k in 1:m) {
for (i in 1:n) {
if (nomes1[k] == colnames(panel_data)[i]) {
gov_[k] <- (pesos1[k]) * panel_data[j, i]
}
}
}
gov[j] <- sum(gov_[k])
}
gov
m <- length(nomes1)
linhas <- nrow(panel_data)
gov_ <- vector()
gov <- vector()
for (j in 1:linhas) {
for (k in 1:m) {
for (i in 1:n) {
if (nomes1[k] == colnames(panel_data)[i]) {
gov_[k] <- (pesos1[k]) * panel_data[j, i]
}
}
}
gov[j] <- sum(gov_)
}
gov
setwd("~/Insper/Data/Projeto Macro/Data_Macro_ESG/Macro_2021.2")
rm(list=ls())
library(readxl)
library(tidyverse)
library(factoextra)
library(ggrepel)
library(plm)
library(dplyr)
# Extraindo e arrumando os dados
data <- read_excel("Bases/ESG_database.xlsx")
data <- data[,-c(2)]
panel_data_ <- pdata.frame(data, index = c("Country.Name", "Time"))
panel_data_ <- panel_data_[,-c(1,2)]
# PCA
## Ajustando escala dos dados
## Inverter o sinal para interpretabilidade
panel_data <- scale(-panel_data_, center = TRUE, scale = TRUE)
pca <- prcomp(panel_data)
## Scree plot
fviz_eig(pca, addlabels = TRUE) +  # scree plot
xlab("Componente Principal") +
ylab("Proporção Explicada da Variância")
## Cargas
Phi <- pca$rotation
# View(Phi)
## Contribuições para as PCs
pc1 <- pca %>% fviz_contrib(choice = "var", axes = 1, sort.val = "asc", fill = "steelblue", color = "black") +
labs(x = "", title = "Contribuiçõess das variáveis para a PC1") +
coord_flip()
pc2 <- pca %>% fviz_contrib(choice = "var", axes = 2, sort.val = "asc", fill = "steelblue", color = "black") +
labs(x = "", title = "Contribuiçõess das variáveis para a PC2") +
coord_flip()
pc3 <- pca %>% fviz_contrib(choice = "var", axes = 3, sort.val = "asc", fill = "steelblue", color = "black") +
labs(x = "", title = "Contribuiçõess das variáveis para a PC3") +
coord_flip()
# Multiplicando pelos pesos
threshold <- 100 / ncol(panel_data)
n = nrow(pc1[["data"]])
## Vetores dos pesos
### Para PC1
t = 1
pesos1 <- vector()
nomes1 <- vector()
for(i in 1:n){
if(pc1[["data"]][[i,2]] >= threshold){
pesos1[t] <- Phi[rownames(pc1[["data"]])[[i]], 1]
nomes1[t] <- rownames(pc1[["data"]])[[i]]
t = t + 1
}
}
### Para PC2
t = 1
pesos2 <- vector()
nomes2 <- vector()
for(i in 1:n){
if(pc2[["data"]][[i,2]] >= threshold){
pesos2[t] <-Phi[rownames(pc1[["data"]])[[i]], 2]
nomes2[t] <- rownames(pc2[["data"]])[[i]]
t = t + 1
}
}
### Para PC3
t = 1
pesos3 <- vector()
nomes3 <- vector()
for(i in 1:n){
if(pc3[["data"]][[i,2]] >= threshold){
pesos3[t] <- Phi[rownames(pc1[["data"]])[[i]], 3]
nomes3[t] <- rownames(pc3[["data"]])[[i]]
t = t + 1
}
}
## Soma produto
m <- length(nomes1)
linhas <- nrow(panel_data)
### Para PC1
gov_ <- vector()
gov <- vector()
for (j in 1:linhas) {
for (k in 1:m) {
for (i in 1:n) {
if (nomes1[k] == colnames(panel_data)[i]) {
gov_[k] <- (pesos1[k]) * panel_data[j, i]
}
}
}
gov[j] <- sum(gov_)
}
### Para PC2
soc_ <- vector()
soc <- vector()
for (j in 1:linhas) {
for (k in 1:m) {
for (i in 1:n) {
if (nomes2[k] == colnames(panel_data)[i]) {
soc_[k] <- (pesos2[k]) * panel_data[j, i]
}
}
}
soc[j] <- sum(soc_)
}
### Para PC3
env_ <- vector()
env <- vector()
for (j in 1:linhas) {
for (k in 1:m) {
for (i in 1:n) {
if (nomes3[k] == colnames(panel_data)[i]) {
env_[k] <- (pesos3[k]) * panel_data[j, i]
}
}
}
env[j] <- sum(env_)
}
setwd("~/Insper/Data/Projeto Macro/Data_Macro_ESG/Macro_2021.2")
rm(list=ls())
library(readxl)
library(tidyverse)
library(factoextra)
library(ggrepel)
library(plm)
library(dplyr)
# Extraindo e arrumando os dados
data <- read_excel("Bases/ESG_database.xlsx")
data <- data[,-c(2)]
panel_data_ <- pdata.frame(data, index = c("Country.Name", "Time"))
panel_data_ <- panel_data_[,-c(1,2)]
# PCA
## Ajustando escala dos dados
## Inverter o sinal para interpretabilidade
panel_data <- scale(-panel_data_, center = TRUE, scale = TRUE)
pca <- prcomp(panel_data)
## Scree plot
fviz_eig(pca, addlabels = TRUE) +  # scree plot
xlab("Componente Principal") +
ylab("Proporção Explicada da Variância")
## Cargas
Phi <- pca$rotation
# View(Phi)
## Contribuições para as PCs
pc1 <- pca %>% fviz_contrib(choice = "var", axes = 1, sort.val = "asc", fill = "steelblue", color = "black") +
labs(x = "", title = "Contribuiçõess das variáveis para a PC1") +
coord_flip()
pc2 <- pca %>% fviz_contrib(choice = "var", axes = 2, sort.val = "asc", fill = "steelblue", color = "black") +
labs(x = "", title = "Contribuiçõess das variáveis para a PC2") +
coord_flip()
pc3 <- pca %>% fviz_contrib(choice = "var", axes = 3, sort.val = "asc", fill = "steelblue", color = "black") +
labs(x = "", title = "Contribuiçõess das variáveis para a PC3") +
coord_flip()
# Multiplicando pelos pesos
threshold <- 100 / ncol(panel_data)
n = nrow(pc1[["data"]])
## Vetores dos pesos
### Para PC1
t = 1
pesos1 <- vector()
nomes1 <- vector()
for(i in 1:n){
if(pc1[["data"]][[i,2]] >= threshold){
pesos1[t] <- Phi[rownames(pc1[["data"]])[[i]], 1]
nomes1[t] <- rownames(pc1[["data"]])[[i]]
t = t + 1
}
}
### Para PC2
t = 1
pesos2 <- vector()
nomes2 <- vector()
for(i in 1:n){
if(pc2[["data"]][[i,2]] >= threshold){
pesos2[t] <-Phi[rownames(pc1[["data"]])[[i]], 2]
nomes2[t] <- rownames(pc2[["data"]])[[i]]
t = t + 1
}
}
### Para PC3
t = 1
pesos3 <- vector()
nomes3 <- vector()
for(i in 1:n){
if(pc3[["data"]][[i,2]] >= threshold){
pesos3[t] <- Phi[rownames(pc1[["data"]])[[i]], 3]
nomes3[t] <- rownames(pc3[["data"]])[[i]]
t = t + 1
}
}
## Soma produto
linhas <- nrow(panel_data)
### Para PC1
m <- length(nomes1)
gov_ <- vector()
gov <- vector()
for (j in 1:linhas) {
for (k in 1:m) {
for (i in 1:n) {
if (nomes1[k] == colnames(panel_data)[i]) {
gov_[k] <- (pesos1[k]) * panel_data[j, i]
}
}
}
gov[j] <- sum(gov_)
}
### Para PC2
m <- length(nomes2)
soc_ <- vector()
soc <- vector()
for (j in 1:linhas) {
for (k in 1:m) {
for (i in 1:n) {
if (nomes2[k] == colnames(panel_data)[i]) {
soc_[k] <- (pesos2[k]) * panel_data[j, i]
}
}
}
soc[j] <- sum(soc_)
}
### Para PC3
m <- length(nomes3)
env_ <- vector()
env <- vector()
for (j in 1:linhas) {
for (k in 1:m) {
for (i in 1:n) {
if (nomes3[k] == colnames(panel_data)[i]) {
env_[k] <- (pesos3[k]) * panel_data[j, i]
}
}
}
env[j] <- sum(env_)
}
env
pca %>% fviz_contrib(choice = "var", axes = 3, sort.val = "asc", fill = "steelblue", color = "black") +
labs(x = "", title = "Contribuiçõess das variáveis para a PC3") +
coord_flip()
setwd("~/Insper/Data/Projeto Macro/Data_Macro_ESG/Macro_2021.2")
rm(list=ls())
library(readxl)
library(tidyverse)
library(factoextra)
library(ggrepel)
library(plm)
library(dplyr)
# Extraindo e arrumando os dados
data <- read_excel("Bases/ESG_database.xlsx")
data <- data[,-c(2)]
panel_data_ <- pdata.frame(data, index = c("Country.Name", "Time"))
panel_data_ <- panel_data_[,-c(1,2)]
# PCA
## Ajustando escala dos dados
## Inverter o sinal para interpretabilidade
panel_data <- scale(-panel_data_, center = TRUE, scale = TRUE)
pca <- prcomp(panel_data)
## Scree plot
fviz_eig(pca, addlabels = TRUE) +  # scree plot
xlab("Componente Principal") +
ylab("Proporção Explicada da Variância")
## Cargas
Phi <- pca$rotation
# View(Phi)
## Contribuições para as PCs
pc1 <- pca %>% fviz_contrib(choice = "var", axes = 1, sort.val = "asc", fill = "steelblue", color = "black") +
labs(x = "", title = "Contribuiçõess das variáveis para a PC1") +
coord_flip()
pc2 <- pca %>% fviz_contrib(choice = "var", axes = 2, sort.val = "asc", fill = "steelblue", color = "black") +
labs(x = "", title = "Contribuiçõess das variáveis para a PC2") +
coord_flip()
pc3 <- pca %>% fviz_contrib(choice = "var", axes = 3, sort.val = "asc", fill = "steelblue", color = "black") +
labs(x = "", title = "Contribuiçõess das variáveis para a PC3") +
coord_flip()
# Multiplicando pelos pesos
threshold <- 100 / ncol(panel_data)
colunas <- nrow(pc1[["data"]])
## Vetores dos pesos e nomes
### Para PC1
t = 1
pesos1 <- vector()
nomes1 <- vector()
for (i in 1:colunas) {
if (pc1[["data"]][[i,2]] >= threshold) {
pesos1[t] <- Phi[rownames(pc1[["data"]])[[i]], 1]
nomes1[t] <- rownames(pc1[["data"]])[[i]]
t = t + 1
}
}
### Para PC2
t = 1
pesos2 <- vector()
nomes2 <- vector()
for (i in 1:colunas) {
if (pc2[["data"]][[i,2]] >= threshold) {
pesos2[t] <-Phi[rownames(pc1[["data"]])[[i]], 2]
nomes2[t] <- rownames(pc2[["data"]])[[i]]
t = t + 1
}
}
### Para PC3
t = 1
pesos3 <- vector()
nomes3 <- vector()
for (i in 1:colunas) {
if (pc3[["data"]][[i,2]] >= threshold) {
pesos3[t] <- Phi[rownames(pc1[["data"]])[[i]], 3]
nomes3[t] <- rownames(pc3[["data"]])[[i]]
t = t + 1
}
}
## Soma produto
linhas <- nrow(panel_data)
### Para PC1
m <- length(nomes1)
gov_ <- vector()
gov <- vector()
for (j in 1:linhas) {
for (k in 1:m) {
for (i in 1:colunas) {
if (nomes1[k] == colnames(panel_data)[i]) {
gov_[k] <- (pesos1[k]) * panel_data[j, i]
}
}
}
gov[j] <- sum(gov_)
}
### Para PC2
m <- length(nomes2)
soc_ <- vector()
soc <- vector()
for (j in 1:linhas) {
for (k in 1:m) {
for (i in 1:colunas) {
if (nomes2[k] == colnames(panel_data)[i]) {
soc_[k] <- (pesos2[k]) * panel_data[j, i]
}
}
}
soc[j] <- sum(soc_)
}
### Para PC3
m <- length(nomes3)
env_ <- vector()
env <- vector()
for (j in 1:linhas) {
for (k in 1:m) {
for (i in 1:colunas) {
if (nomes3[k] == colnames(panel_data)[i]) {
env_[k] <- (pesos3[k]) * panel_data[j, i]
}
}
}
env[j] <- sum(env_)
}
ESG <- panel_data
View(ESG)
ESG$Governance <- gov
View(ESG)
ESG <- panel_data
ESG["Governance"] <- gov
ESG
View(panel_data)
View(ESG)
ESG <- panel_data
ESG <- cbind(ESG, new_col = gov)
View(ESG)
ESG <- panel_data
ESG <- cbind(ESG, Governance = gov)
View(ESG)
ESG <- panel_data
ESG <- cbind(ESG, Governance = gov)
ESG <- cbind(ESG, Social = soc)
ESG <- cbind(ESG, Environmental = env)
View(ESG)
write.csv(ESG, "test1.csv")
