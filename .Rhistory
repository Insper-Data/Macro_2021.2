(pve <- cumsum(pca$sdev^2) / sum(pca$sdev^2))
fviz_eig(pca, addlabels = TRUE) +  # scree plot
xlab("Componente Principal") +
ylab("ProporÃ§Ã£o explicada da variÃ¢ncia")
rm(list = ls())
library(readxl)
library(tidyverse)
library(factoextra)
library(ggrepel)
library(plm)
options(digits = 2)
data <- read_excel("~/Insper/Data/Projeto Macro/full.xlsx")
data <- data[,-c(2)]
panel_data <- pdata.frame(data, index = c("Country.Name", "Time"))
# Tirando as colunas que não vão ser utilizadas (mobile também)
panel_data <- panel_data[,-c(1,2,21)]
set.seed(1234)
X <- scale(panel_data, center = TRUE, scale = TRUE)
pca <- prcomp(X)
fviz_eig(pca, addlabels = TRUE) +  # scree plot
xlab("Componente Principal") +
ylab("ProporÃ§Ã£o explicada da variÃ¢ncia")
fviz_eig(pca, addlabels = TRUE) +  # scree plot
xlab("Componente Principal") +
ylab("ProporÃ§Ã£o explicada da variÃ¢ncia")
rm(list = ls())
library(readxl)
library(tidyverse)
library(factoextra)
library(ggrepel)
library(plm)
options(digits = 2)
data <- read_excel("~/Insper/Data/Projeto Macro/full.xlsx")
data <- data[,-c(2)]
panel_data <- pdata.frame(data, index = c("Country.Name", "Time"))
# Tirando as colunas que não vão ser utilizadas (mobile também)
panel_data <- panel_data[,-c(1,2,21)]
# usando todas as colunas
set.seed(1234)
X <- scale(panel_data, center = TRUE, scale = TRUE)
pca <- prcomp(X)
pca$rotation <- -pca$rotation
pca$x <- -pca$x
fviz_eig(pca, addlabels = TRUE) +  # scree plot
xlab("Componente Principal") +
ylab("ProporÃ§Ã£o explicada da variÃ¢ncia")
(Phi <- pca$rotation)
View(Phi)
rm(list=ls())
library(readxl)
library(tidyverse)
library(factoextra)
library(ggrepel)
library(plm)
data <- read_excel("~/Insper/Data/Projeto Macro/full.xlsx")
data <- data[,-c(2)]
panel_data <- pdata.frame(data, index = c("Country.Name", "Time"))
# Tirando as colunas que não vão ser utilizadas (mobile também)
panel_data <- panel_data[,-c(1,2,21)]
pca <- panel_data %>%
prcomp(scale = TRUE)
# proportion of variance explained
(pve <- cumsum(pca$sdev^2) / sum(pca$sdev^2))
fviz_eig(pca, addlabels = TRUE) +  # scree plot
xlab("Componente Principal") +
ylab("ProporÃ§Ã£o explicada da variÃ¢ncia")
# Kaiser, Henry F. 1961. "A Note on Guttman's Lower Bound for the Number of Common Factors." British Journal of Statistical Psychology 14: 1-2.
# An eigenvalue > 1 indicates that PCs account for more variance than accounted by one of the original variables in standardized data. This is commonly used as a cutoff point for which PCs are retained. This holds true only when the data are standardized.
get_eigenvalue(pca)[1:10, 1:2]
# equivalente a
(pca$sdev^2)[1:10]
Phi <- pca$rotation
View(Phi)
# a contribuiÃ§Ã£o percentual de uma variÃ¡vel Ã© 100 * o quadrado
# da carga correspodente dividido pela soma dos quadrados das cargas
sort(100 * Phi[, 1]^2 / sum(Phi[, 1]^2), decreasing = TRUE)
pca %>% fviz_contrib(choice = "var", axes = 1, sort.val = "asc", fill = "steelblue", color = "black") +
labs(x = "", title = "Contribuiçõess das variáveis para a PC1") +
coord_flip()
pca %>% fviz_contrib(choice = "var", axes = 2, sort.val = "asc", fill = "steelblue", color = "black") +
labs(x = "", title = "Contribuiçõess das variáveis para a PC2") +
coord_flip()
=
=
=
rm(list = ls())
library(readxl)
library(tidyverse)
library(factoextra)
library(ggrepel)
library(plm)
options(digits = 2)
data <- read_excel("~/Insper/Data/Projeto Macro/full.xlsx")
data <- data[,-c(2)]
panel_data <- pdata.frame(data, index = c("Country.Name", "Time"))
# Tirando as colunas que não vão ser utilizadas (mobile também)
panel_data <- panel_data[,-c(1,2,21)]
set.seed(1234)
X <- scale(panel_data, center = TRUE, scale = TRUE)
pca <- prcomp(X)
pca$rotation <- -pca$rotation
pca$x <- -pca$x
(Phi <- pca$rotation)
View(Phi)
Z <- pca$x
head(Z)
biplot(pca, scale = 0, cex = 0.75)
biplot(pca, scale = 0, cex = 0.75)
View(Phi)
setwd("~/Insper/Data/Projeto Macro/Data_Macro_ESG/Macro_2021.2")
rm(list=ls())
library(readxl)
library(tidyverse)
library(factoextra)
library(ggrepel)
library(plm)
library(dplyr)
data <- read_excel("Bases/ESG_database.xlsx")
data <- data[,-c(2)]
panel_data <- pdata.frame(data, index = c("Country.Name", "Time"))
panel_data <- panel_data[,-c(1,2)]
View(panel_data)
panel_data <- scale(-panel_data, center = TRUE, scale = TRUE)
pca <- prcomp(panel_data)
scree_plot <- fviz_eig(pca, addlabels = TRUE) +  # scree plot
xlab("Componente Principal") +
ylab("Proporção Explicada da Variância")
fviz_eig(pca, addlabels = TRUE) +  # scree plot
xlab("Componente Principal") +
ylab("Proporção Explicada da Variância")
kaiser_criteria <- get_eigenvalue(pca) # Apenas se eigenvalue > 1
get_eigenvalue(pca)
kaiser_criteria
View(kaiser_criteria)
pc1 <- pca %>% fviz_contrib(choice = "var", axes = 1, sort.val = "asc", fill = "steelblue", color = "black") +
labs(x = "", title = "Contribuiçõess das variáveis para a PC1") +
coord_flip()
pc1
scree_plot
pc2 <- pca %>% fviz_contrib(choice = "var", axes = 2, sort.val = "asc", fill = "steelblue", color = "black") +
labs(x = "", title = "Contribuiçõess das variáveis para a PC2") +
coord_flip()
pc2
pc3 <- pca %>% fviz_contrib(choice = "var", axes = 3, sort.val = "asc", fill = "steelblue", color = "black") +
labs(x = "", title = "Contribuiçõess das variáveis para a PC3") +
coord_flip()
pc3
kaiser_criteria <- get_eigenvalue(pca) # Apenas se eigenvalue > 1
kaiser_criteria
threshold <- 100 / ncol(panel_data)
colunas <- nrow(pc1[["data"]])
t = 1
pesos1 <- vector()
nomes1 <- vector()
for (i in 1:colunas) {
if (pc1[["data"]][[i,2]] >= threshold) {
pesos1[t] <- Phi[rownames(pc1[["data"]])[[i]], 1]
nomes1[t] <- rownames(pc1[["data"]])[[i]]
t = t + 1
}
}
t = 1
pesos2 <- vector()
nomes2 <- vector()
for (i in 1:colunas) {
if (pc2[["data"]][[i,2]] >= threshold) {
pesos2[t] <-Phi[rownames(pc1[["data"]])[[i]], 2]
nomes2[t] <- rownames(pc2[["data"]])[[i]]
t = t + 1
}
}
t = 1
pesos3 <- vector()
nomes3 <- vector()
for (i in 1:colunas) {
if (pc3[["data"]][[i,2]] >= threshold) {
pesos3[t] <- Phi[rownames(pc1[["data"]])[[i]], 3]
nomes3[t] <- rownames(pc3[["data"]])[[i]]
t = t + 1
}
}
linhas <- nrow(panel_data)
m <- length(nomes1)
gov_ <- vector()
gov <- vector()
for (j in 1:linhas) {
for (k in 1:m) {
for (i in 1:colunas) {
if (nomes1[k] == colnames(panel_data)[i]) {
gov_[k] <- (pesos1[k]) * panel_data[j, i]
}
}
}
gov[j] <- sum(gov_)
}
m <- length(nomes2)
soc_ <- vector()
soc <- vector()
for (j in 1:linhas) {
for (k in 1:m) {
for (i in 1:colunas) {
if (nomes2[k] == colnames(panel_data)[i]) {
soc_[k] <- (pesos2[k]) * panel_data[j, i]
}
}
}
soc[j] <- sum(soc_)
}
m <- length(nomes3)
env_ <- vector()
env <- vector()
for (j in 1:linhas) {
for (k in 1:m) {
for (i in 1:colunas) {
if (nomes3[k] == colnames(panel_data)[i]) {
env_[k] <- (pesos3[k]) * panel_data[j, i]
}
}
}
env[j] <- sum(env_)
}
E_S_G <- panel_data
# 1. Separar as variáveis que entram na definição do índice ESG.
# 2. As demais variáveis viram controles no modelo de painel de efeitos fixos.
# 3. Obter as três primeiras PCs.
# 4. Olhar os scores das variáveis originais (sem controles) nas PCs.
# 5. Para cada PC, ficar apenas com as variáveis com maior score positivo.
# 6. Elevar ao quadro dos scores das variáveis que entraram e zerar os scores das demais.
# 7. Isso define os subíndices G, S e E (checar ordem das componentes).
# 8. Definir o índice final ESG ponderando G, S e E pelo percentual da variância explicada pela PC correspondente.
setwd("~/Insper/Data/Projeto Macro/Data_Macro_ESG/Macro_2021.2")
rm(list=ls())
library(readxl)
library(tidyverse)
library(factoextra)
library(ggrepel)
library(plm)
library(dplyr)
# Extraindo e arrumando os dados
data <- read_excel("Bases/ESG_database.xlsx")
data <- data[,-c(2)]
panel_data <- pdata.frame(data, index = c("Country.Name", "Time"))
panel_data <- panel_data[,-c(1,2)]
# PCA
## Ajustando escala dos dados
## Inverter o sinal para interpretabilidade
panel_data <- scale(-panel_data, center = TRUE, scale = TRUE)
pca <- prcomp(panel_data)
## Scree plot
scree_plot <- fviz_eig(pca, addlabels = TRUE) +  # scree plot
xlab("Componente Principal") +
ylab("Proporção Explicada da Variância")
### Quantas PCs pegar
kaiser_criteria <- get_eigenvalue(pca) # Apenas se eigenvalue > 1
View(kaiser_criteria)
## Cargas
Phi <- pca$rotation
# View(Phi)
## Contribuições para as PCs
pc1 <- pca %>% fviz_contrib(choice = "var", axes = 1, sort.val = "asc", fill = "steelblue", color = "black") +
labs(x = "", title = "Contribuiçõess das variáveis para a PC1") +
coord_flip()
pc2 <- pca %>% fviz_contrib(choice = "var", axes = 2, sort.val = "asc", fill = "steelblue", color = "black") +
labs(x = "", title = "Contribuiçõess das variáveis para a PC2") +
coord_flip()
pc3 <- pca %>% fviz_contrib(choice = "var", axes = 3, sort.val = "asc", fill = "steelblue", color = "black") +
labs(x = "", title = "Contribuiçõess das variáveis para a PC3") +
coord_flip()
# Multiplicando pelos pesos
threshold <- 100 / ncol(panel_data)
colunas <- nrow(pc1[["data"]])
## Vetores dos pesos e nomes
### Para PC1
t = 1
pesos1 <- vector()
nomes1 <- vector()
for (i in 1:colunas) {
if (pc1[["data"]][[i,2]] >= threshold) {
pesos1[t] <- Phi[rownames(pc1[["data"]])[[i]], 1]
nomes1[t] <- rownames(pc1[["data"]])[[i]]
t = t + 1
}
}
### Para PC2
t = 1
pesos2 <- vector()
nomes2 <- vector()
for (i in 1:colunas) {
if (pc2[["data"]][[i,2]] >= threshold) {
pesos2[t] <-Phi[rownames(pc1[["data"]])[[i]], 2]
nomes2[t] <- rownames(pc2[["data"]])[[i]]
t = t + 1
}
}
### Para PC3
t = 1
pesos3 <- vector()
nomes3 <- vector()
for (i in 1:colunas) {
if (pc3[["data"]][[i,2]] >= threshold) {
pesos3[t] <- Phi[rownames(pc1[["data"]])[[i]], 3]
nomes3[t] <- rownames(pc3[["data"]])[[i]]
t = t + 1
}
}
## Soma produto
linhas <- nrow(panel_data)
### Para PC1
m <- length(nomes1)
gov_ <- vector()
gov <- vector()
for (j in 1:linhas) {
for (k in 1:m) {
for (i in 1:colunas) {
if (nomes1[k] == colnames(panel_data)[i]) {
gov_[k] <- (pesos1[k]) * panel_data[j, i]
}
}
}
gov[j] <- sum(gov_)
}
### Para PC2
m <- length(nomes2)
soc_ <- vector()
soc <- vector()
for (j in 1:linhas) {
for (k in 1:m) {
for (i in 1:colunas) {
if (nomes2[k] == colnames(panel_data)[i]) {
soc_[k] <- (pesos2[k]) * panel_data[j, i]
}
}
}
soc[j] <- sum(soc_)
}
### Para PC3
m <- length(nomes3)
env_ <- vector()
env <- vector()
for (j in 1:linhas) {
for (k in 1:m) {
for (i in 1:colunas) {
if (nomes3[k] == colnames(panel_data)[i]) {
env_[k] <- (pesos3[k]) * panel_data[j, i]
}
}
}
env[j] <- sum(env_)
}
# Inserindo de volta no dataframe
E_S_G <- panel_data
E_S_G <- cbind(E_S_G, Governance = gov) # Invertendo o sinal
E_S_G <- cbind(E_S_G, Social = soc)
E_S_G <- cbind(E_S_G, Environmental = env)
variance <- c(scree_plot[["data"]][[1,2]],
scree_plot[["data"]][[2,2]],
scree_plot[["data"]][[3,2]])
total <- sum(variance)
proportion <- c(scree_plot[["data"]][[1,2]]/total,
scree_plot[["data"]][[2,2]]/total,
scree_plot[["data"]][[3,2]]/total)
variance_exp <- data.frame(proportion)
ESGI <- vector()
for (i in 1:linhas) {
ESGI[i] <- E_S_G[i, "Governance"] * variance_exp[1,1] +
E_S_G[i, "Social"] * variance_exp[2,1] +
E_S_G[i, "Environmental"] * variance_exp[3,1]
}
ESG <- E_S_G
ESG <- cbind(ESG, ESGI = ESGI)
View(ESG)
View(panel_data)
View(data)
View(ESG)
rm(list=ls())
library(tidyverse)
setwd("~/Insper/Data/Projeto Macro/Data_Macro_ESG/Macro_2021.2")
data <- read.csv("test4.csv")
teste <- data %>%
rename(Development = develop) %>%
group_by(Development, Time) %>%
summarise(ESG = mean(ESG_Index)) %>%
ggplot(aes(x = Time, y = ESG, color=Development )) +
scale_color_manual(values = c("EM" = "red4", "AV" = "navyblue"))+
geom_point() +
geom_line()+
labs(x = "Year", y = "Index", title = "", subtitle = "") +
theme_bw()
teste
teste <- data %>%
rename(Development = develop) %>%
group_by(Development, Time) %>%
summarise(ESG = mean(Environmental)) %>%
ggplot(aes(x = Time, y = ESG, color=Development )) +
scale_color_manual(values = c("EM" = "red4", "AV" = "navyblue"))+
geom_point() +
geom_line()+
labs(x = "Year", y = "Index", title = "", subtitle = "") +
theme_bw()
teste
teste <- data %>%
rename(Development = develop) %>%
group_by(Development, Time) %>%
summarise(ESG = mean(Social)) %>%
ggplot(aes(x = Time, y = ESG, color=Development )) +
scale_color_manual(values = c("EM" = "red4", "AV" = "navyblue"))+
geom_point() +
geom_line()+
labs(x = "Year", y = "Index", title = "", subtitle = "") +
theme_bw()
teste
teste <- data %>%
rename(Development = develop) %>%
group_by(Development, Time) %>%
summarise(ESG = -mean(Social)) %>%
ggplot(aes(x = Time, y = ESG, color=Development )) +
scale_color_manual(values = c("EM" = "red4", "AV" = "navyblue"))+
geom_point() +
geom_line()+
labs(x = "Year", y = "Index", title = "", subtitle = "") +
theme_bw()
teste
teste <- data %>%
rename(Development = develop) %>%
group_by(Development, Time) %>%
summarise(ESG = -mean(Environmental)) %>%
ggplot(aes(x = Time, y = ESG, color=Development )) +
scale_color_manual(values = c("EM" = "red4", "AV" = "navyblue"))+
geom_point() +
geom_line()+
labs(x = "Year", y = "Index", title = "", subtitle = "") +
theme_bw()
teste
teste <- data %>%
rename(Development = develop) %>%
group_by(Development, Time) %>%
summarise(ESG = -mean(Governance)) %>%
ggplot(aes(x = Time, y = ESG, color=Development )) +
scale_color_manual(values = c("EM" = "red4", "AV" = "navyblue"))+
geom_point() +
geom_line()+
labs(x = "Year", y = "Index", title = "", subtitle = "") +
theme_bw()
teste
teste <- data %>%
rename(Development = develop) %>%
group_by(Development, Time) %>%
summarise(ESG = -mean(Government.Effectiveness..Estimate)) %>%
ggplot(aes(x = Time, y = ESG, color=Development )) +
scale_color_manual(values = c("EM" = "red4", "AV" = "navyblue"))+
geom_point() +
geom_line()+
labs(x = "Year", y = "Index", title = "", subtitle = "") +
theme_bw()
teste
teste <- data %>%
rename(Development = develop) %>%
group_by(Development, Time) %>%
summarise(ESG = -mean(Rule.of.Law..Estimate)) %>%
ggplot(aes(x = Time, y = ESG, color=Development )) +
scale_color_manual(values = c("EM" = "red4", "AV" = "navyblue"))+
geom_point() +
geom_line()+
labs(x = "Year", y = "Index", title = "", subtitle = "") +
theme_bw()
teste
# 1. Separar as variáveis que entram na definição do índice ESG.
# 2. As demais variáveis viram controles no modelo de painel de efeitos fixos.
# 3. Obter as três primeiras PCs.
# 4. Olhar os scores das variáveis originais (sem controles) nas PCs.
# 5. Para cada PC, ficar apenas com as variáveis com maior score positivo.
# 6. Elevar ao quadro dos scores das variáveis que entraram e zerar os scores das demais.
# 7. Isso define os subíndices G, S e E (checar ordem das componentes).
# 8. Definir o índice final ESG ponderando G, S e E pelo percentual da variância explicada pela PC correspondente.
setwd("~/Insper/Data/Projeto Macro/Data_Macro_ESG/Macro_2021.2")
rm(list=ls())
library(readxl)
library(tidyverse)
library(factoextra)
library(ggrepel)
library(plm)
library(dplyr)
# Extraindo e arrumando os dados
data <- read_excel("Bases/ESG_database.xlsx")
data <- data[,-c(2)]
panel_data <- pdata.frame(data, index = c("Country.Name", "Time"))
panel_data <- panel_data[,-c(1,2)]
# PCA
## Ajustando escala dos dados
## Inverter o sinal para interpretabilidade
panel_data <- scale(-panel_data, center = TRUE, scale = TRUE)
pca <- prcomp(panel_data)
## Scree plot
scree_plot <- fviz_eig(pca, addlabels = TRUE) +  # scree plot
xlab("Componente Principal") +
ylab("Proporção Explicada da Variância")
### Quantas PCs pegar
kaiser_criteria <- get_eigenvalue(pca) # Apenas se eigenvalue > 1
View(kaiser_criteria)
## Cargas
Phi <- pca$rotation
# View(Phi)
## Contribuições para as PCs
pc1 <- pca %>% fviz_contrib(choice = "var", axes = 1, sort.val = "asc", fill = "steelblue", color = "black") +
labs(x = "", title = "Contribuiçõess das variáveis para a PC1") +
coord_flip()
pc1
pc2 <- pca %>% fviz_contrib(choice = "var", axes = 2, sort.val = "asc", fill = "steelblue", color = "black") +
labs(x = "", title = "Contribuiçõess das variáveis para a PC2") +
coord_flip()
pc2
View(Phi)
